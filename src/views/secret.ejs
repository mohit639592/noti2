<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>ACCESS PROTOCOL — PIN ENTRY</title>
<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
<style>
  :root{
    --neon: #00ffe1;
    --neon-2: #00b3ff;
    --bg: #000;
    --glass: rgba(0,0,0,0.45);
  }
  /* Reset */
  *{box-sizing:border-box;margin:0;padding:0}
  html,body{height:100%}
  body{
    font-family: 'Orbitron', sans-serif;
    background: radial-gradient(ellipse at 20% 10%, rgba(0,255,225,0.03), transparent 10%),
                radial-gradient(ellipse at 80% 90%, rgba(0,150,255,0.02), transparent 10%),
                var(--bg);
    color: var(--neon);
    display:flex;
    align-items:center;
    justify-content:center;
    overflow:hidden;
  }

  /* MATRIX STREAM */
  .matrix {
    position:fixed;
    inset:0;
    z-index:0;
    background:
      linear-gradient(0deg, rgba(0,0,0,0.48), transparent 20%),
      repeating-linear-gradient(90deg, rgba(0,255,225,0.02) 0 1px, transparent 1px 40px);
    pointer-events:none;
  }
  .matrix:after{
    content:'';
    position:absolute; inset:0;
    background-image: linear-gradient(transparent 60%, rgba(0,0,0,0.6) 100%);
    mix-blend-mode: overlay;
  }

  /* Neon frame */
  .container{
    position:relative;
    width:min(720px, 92vw);
    max-width:720px;
    padding:28px;
    border-radius:14px;
    background: linear-gradient(180deg, rgba(0,0,0,0.45), rgba(0,0,0,0.35));
    box-shadow:
      0 0 40px rgba(0,179,255,0.06),
      inset 0 0 60px rgba(0,255,225,0.02);
    border: 1px solid rgba(0,255,225,0.08);
    z-index:2;
    backdrop-filter: blur(6px) saturate(1.2);
    overflow:hidden;
  }

  .title-row{
    display:flex;
    align-items:center;
    justify-content:space-between;
    gap:12px;
    margin-bottom:18px;
  }
  .title{
    display:flex;
    gap:12px;
    align-items:center;
  }
  .logo-dot{
    width:14px;height:14px;border-radius:50%;
    box-shadow:0 0 16px var(--neon);
    background: linear-gradient(135deg,var(--neon),var(--neon-2));
  }
  h1{font-size:18px; letter-spacing:1px; color:var(--neon); text-shadow:0 0 12px rgba(0,255,225,0.25)}
  .sub{font-size:12px; color:rgba(0,255,225,0.6)}

  /* HUD scan bar */
  .scan {
    position:absolute; left:-40%; top:-20%;
    width:200%; height:200%;
    background: radial-gradient(circle at 50% 50%, rgba(0,255,225,0.02), transparent 20%);
    transform: rotate(20deg);
    pointer-events:none;
    animation: slowPan 8s linear infinite;
    mix-blend-mode: screen;
  }
  @keyframes slowPan { 0%{transform:rotate(20deg) translateX(-5%)} 50%{transform:rotate(20deg) translateX(5%)} 100%{transform:rotate(20deg) translateX(-5%)} }

  /* PIN display area */
  .panel {
    display:grid;
    grid-template-columns: 1fr 320px;
    gap:16px;
    align-items:center;
  }
  @media(max-width:760px){ .panel{grid-template-columns:1fr; } }

  .reader {
    padding:18px;
    border-radius:10px;
    background: linear-gradient(180deg, rgba(0,0,0,0.25), rgba(0,0,0,0.18));
    border: 1px solid rgba(0,255,225,0.06);
    height:160px;
    display:flex;
    flex-direction:column;
    justify-content:center;
    gap:12px;
    position:relative;
    overflow:hidden;
  }
  .reader .screen {
    font-size:28px;
    letter-spacing:10px;
    text-align:center;
    padding:8px 6px;
    color:var(--neon);
    text-shadow:0 0 18px rgba(0,255,225,0.12);
  }
  .reader .hint{ font-size:12px; color:rgba(0,255,225,0.5); text-align:center; }

  /* blinking caret */
  .caret { display:inline-block; width:8px; height:32px; background:var(--neon); margin-left:6px; animation: blink 1s steps(1) infinite; vertical-align:middle; }
  @keyframes blink {50%{opacity:0}}

  /* keypad / controls */
  .controls{
    padding:18px;
    border-radius:10px;
    background: linear-gradient(180deg, rgba(0,0,0,0.18), rgba(0,0,0,0.09));
    border: 1px solid rgba(0,255,225,0.05);
  }
  .num-grid{
    display:grid;
    grid-template-columns: repeat(3,1fr);
    gap:10px;
  }
  .key{
    background:linear-gradient(180deg, rgba(0,0,0,0.45), rgba(0,0,0,0.2));
    border:1px solid rgba(0,255,225,0.06);
    height:56px;
    display:flex;
    align-items:center;
    justify-content:center;
    border-radius:8px;
    font-size:18px;
    cursor:pointer;
    transition: transform .12s ease, box-shadow .12s;
    color:var(--neon);
    text-shadow:0 0 8px rgba(0,255,225,0.06);
  }
  .key:active{ transform:translateY(2px) scale(.995); box-shadow:0 6px 18px rgba(0,0,0,0.5) }
  .key.operator{ background: linear-gradient(180deg, rgba(0,150,255,0.12), rgba(0,150,255,0.06)); border:1px solid rgba(0,180,255,0.12); }
  .actions{ display:flex; gap:10px; margin-top:12px; }
  .btn {
    flex:1; padding:10px 12px; border-radius:8px; cursor:pointer;
    border:1px solid rgba(0,255,225,0.06); background:rgba(0,0,0,0.35);
    color:var(--neon); font-weight:700; letter-spacing:1px;
  }
  .btn.unlock{
    background: linear-gradient(90deg, rgba(0,255,225,0.12), rgba(0,150,255,0.12));
    border: 1px solid rgba(0,255,225,0.18);
    box-shadow: 0 6px 30px rgba(0,179,255,0.06);
  }
  .btn.danger{ background: rgba(255,0,0,0.06); color:#ff6b6b; border:1px solid rgba(255,50,50,0.08) }

  /* small status log */
  .log {
    margin-top:10px; font-size:12px; color:rgba(0,255,225,0.45);
    display:flex; gap:8px; align-items:center; justify-content:center;
  }
  .dot-green{ width:8px; height:8px; border-radius:50%; background:var(--neon); box-shadow:0 0 8px var(--neon); }

  /* toast / error */
  .msg {
    position:absolute; left:50%; transform:translateX(-50%); bottom:8px;
    background:rgba(0,0,0,0.7); color:#ff8b8b; padding:6px 12px; border-radius:8px; font-size:13px;
    border:1px solid rgba(255,120,120,0.08); display:none;
  }

  /* success overlay */
  .success-overlay{
    position:absolute; inset:0; display:flex; align-items:center; justify-content:center;
    background: linear-gradient(90deg, rgba(0,255,225,0.03), rgba(0,150,255,0.02));
    z-index:5; backdrop-filter: blur(3px);
    opacity:0; pointer-events:none; transition: .4s ease;
  }
  .success-overlay.show{ opacity:1; pointer-events:auto; }
  .success-card{
    border-radius:12px; padding:18px 28px; text-align:center; border:1px solid rgba(0,255,225,0.12);
    background: rgba(0,0,0,0.55); box-shadow:0 10px 40px rgba(0,255,225,0.04);
  }
  .success-card h2{ color:var(--neon); margin-bottom:8px; }
  .success-check{
    width:72px;height:72px;border-radius:50%; display:inline-grid;place-items:center;
    border:3px solid rgba(0,255,225,0.14); box-shadow:0 0 30px rgba(0,255,225,0.06);
    font-size:34px; color:var(--neon);
  }

  /* subtle grid lines on container edges */
  .edge-glow{ position:absolute; inset:0; border-radius:14px; pointer-events:none;
    box-shadow: 0 0 40px rgba(0,255,225,0.02) inset; mix-blend-mode: screen; }
</style>
</head>
<body>

<div class="matrix"></div>

<div class="container" role="main" aria-labelledby="title">
  <div class="scan"></div>
  <div class="title-row">
    <div class="title">
      <div class="logo-dot" aria-hidden="true"></div>
      <div>
        <h1 id="title">ACCESS PROTOCOL — PIN</h1>
        <div class="sub">AUTH LEVEL: SECURE · HARDWARE TOKEN REQUIRED</div>
      </div>
    </div>
    <div class="sub">SYSTEM ID: MISSION-CONTROL-01</div>
  </div>

  <div class="panel">
    <!-- left: reader -->
    <div class="reader" aria-hidden="false">
      <div class="screen" id="pinDisplay" aria-live="polite">•• •• ••</div>
      <div class="hint">Enter 6-digit PIN to unlock the vault</div>

      <div class="log">
        <div class="dot-green" aria-hidden="true"></div>
        <div class="sub">Secure channel: <strong id="channel">ONLINE</strong></div>
      </div>

      <div class="msg" id="msg">Invalid PIN</div>
    </div>

    <!-- right: keypad -->
    <div class="controls" role="form" aria-label="PIN keypad">
      <div class="num-grid" id="keypad">
        <!-- keys added by JS for accessibility -->
      </div>

      <div class="actions">
        <button class="btn danger" id="clearBtn" type="button">CLEAR</button>
        <button class="btn unlock" id="enterBtn" type="button">UNLOCK</button>
      </div>
    </div>
  </div>

  <div class="edge-glow" aria-hidden="true"></div>

  <!-- Success overlay -->
  <div class="success-overlay" id="successOverlay" aria-hidden="true">
    <div class="success-card" role="dialog" aria-modal="true">
      <div class="success-check">✓</div>
      <h2>ACCESS GRANTED</h2>
      <div class="sub">Redirecting to Secret Vault…</div>
    </div>
  </div>
</div>

<script>
/* -------------------------
   CONFIG: change this PIN
   ------------------------- */
const CONFIG = {
  useBackend: false,   // set true if you want to verify via API (see notes)
  correctPIN: "123456", // only used when useBackend=false
  redirectTo: "/secret-vault", // where to go after success
  pinLength: 6
};

/* Accessibility: build keypad dynamically */
const keypadContainer = document.getElementById('keypad');
const digits = ['1','2','3','4','5','6','7','8','9','←','0','●'];

digits.forEach(d=>{
  const btn = document.createElement('button');
  btn.type = 'button';
  btn.className = 'key' + (['←','●'].includes(d) ? ' operator' : '');
  btn.textContent = d === '●' ? '' : d;
  if(d === '●'){ // decorative dot (disabled)
    btn.setAttribute('aria-hidden','true');
    btn.style.opacity = .06;
    btn.style.cursor = 'default';
  } else {
    btn.addEventListener('click', ()=> onKey(d));
    btn.addEventListener('keydown', e => { if(e.key === 'Enter' || e.key === ' ') { e.preventDefault(); onKey(d); }});
  }
  btn.setAttribute('aria-label', d === '←' ? 'backspace' : (d === '●' ? 'padding' : `digit ${d}`));
  keypadContainer.appendChild(btn);
});

/* State */
let pin = '';
const display = document.getElementById('pinDisplay');
const msg = document.getElementById('msg');
const clearBtn = document.getElementById('clearBtn');
const enterBtn = document.getElementById('enterBtn');
const overlay = document.getElementById('successOverlay');

function updateDisplay(){
  // show masked groups like "•• •• ••"
  const masked = pin.split('').map(()=> '•').join('');
  // group to pairs for readability
  const grouped = masked.replace(/(.{2})/g,'$1 ').trim();
  display.textContent = grouped.padEnd(CONFIG.pinLength + Math.floor(CONFIG.pinLength/2 - 1), ' ');
}

function onKey(k){
  hideMsg();
  if(k === '←'){
    pin = pin.slice(0, -1);
  } else {
    if(pin.length < CONFIG.pinLength) pin += k;
  }
  updateDisplay();
  // auto attempt when full
  if(pin.length === CONFIG.pinLength){
    // small delay to let UI show last entered digit
    setTimeout(tryUnlock, 250);
  }
}

clearBtn.addEventListener('click', ()=> {
  pin = '';
  updateDisplay();
  hideMsg();
});
enterBtn.addEventListener('click', ()=> {
  tryUnlock();
});

/* visual message */
function showMsg(txt){
  msg.textContent = txt;
  msg.style.display = 'block';
  setTimeout(()=> { msg.style.display = 'none'; }, 2500);
}
function hideMsg(){ msg.style.display = 'none'; }

/* Try unlocking */
async function tryUnlock(){
  if(pin.length !== CONFIG.pinLength){
    showMsg('PIN incomplete');
    return;
  }

  if(CONFIG.useBackend){
    // Example: POST /api/verify-pin  { pin: "123456" } -> { ok: true }
    try {
      const res = await fetch('/api/verify-pin', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ pin })
      });
      const j = await res.json();
      if(j && j.ok){
        onUnlockSuccess();
      } else {
        onUnlockFail();
      }
    } catch(err){
      showMsg('Network error');
      console.error(err);
    }
  } else {
    // Frontend check (not secure) — only for demo
    if(pin === CONFIG.correctPIN){
      onUnlockSuccess();
    } else {
      onUnlockFail();
    }
  }
}

function onUnlockFail(){
  // shake effect + message + clear last digit
  display.animate([
    { transform: 'translateX(0)' },
    { transform: 'translateX(-8px)' },
    { transform: 'translateX(8px)' },
    { transform: 'translateX(-6px)' },
    { transform: 'translateX(6px)' },
    { transform: 'translateX(0)' }
  ], { duration: 420, easing: 'cubic-bezier(.2,.8,.2,1)'});
  showMsg('❌ WRONG PIN');
  // keep last digit or clear a bit
  pin = '';
  setTimeout(updateDisplay, 120);
  // subtle log update
  const ch = document.getElementById('channel');
  ch.textContent = 'ATTEMPT REJECTED';
  ch.style.color = '#ff7b7b';
  setTimeout(()=> { ch.textContent = 'ONLINE'; ch.style.color = ''; }, 2200);
}

function onUnlockSuccess(){
  overlay.classList.add('show');
  overlay.setAttribute('aria-hidden','false');
  // success pulse
  const card = overlay.querySelector('.success-card');
  card.animate([
    { transform:'scale(.9)', opacity:0 },
    { transform:'scale(1.03)', opacity:1 },
    { transform:'scale(1)', opacity:1 }
  ], { duration: 520, easing: 'cubic-bezier(.2,.9,.2,1)' });

  // small delay so user sees "ACCESS GRANTED"
  setTimeout(()=> {
    // redirect to vault
    window.location.href = CONFIG.redirectTo;
  }, 900);
}

/* initialize */
updateDisplay();

/* keyboard support */
window.addEventListener('keydown', (e)=>{
  if(e.key >= '0' && e.key <= '9'){
    onKey(e.key);
  } else if(e.key === 'Backspace'){
    onKey('←');
  } else if(e.key === 'Enter'){
    tryUnlock();
  }
});

/* Accessibility: focus ring for keys via keyboard */
document.querySelectorAll('.key').forEach(k=>{
  k.addEventListener('focus', ()=> k.style.boxShadow = '0 6px 20px rgba(0,179,255,0.08)');
  k.addEventListener('blur', ()=> k.style.boxShadow = 'none');
});

/* Notes for backend integration:
   - Set CONFIG.useBackend = true
   - Implement POST /api/verify-pin that returns JSON { ok: true } when correct.
   - Keep transport over HTTPS and add server-side rate-limiting + lockouts for security.
*/
</script>
</body>
</html>
